//  전역변수 선언  및 초기화
var score = 70;

// 변수 재선언
// var로 선언하면 이런식으로 재선언이 가능해져 버린다.
// 이런이상한 현상을 방지하려고 let를 쓴다고 한다. 
// var라는 개념을 사용했던 이유는 브라우저에서는 별로 스코프 구분을 할 필요가 없으니 그렇게 만들었는데,
// 시간이 흘러 서버 작업도 자바스크립트로 하기 시작하면서 명확하지 못한 구분때문에 문제가 되었고, 그래서 let이라는 개념이 도입되었다.
var score = 90;

//var 키워드는 선언전에도 사용이 가능하다.
//이를 가능하게 하는 이유는 호이스팅 때문이다.
//자바스크립트 엔진은 프로그램을 실행할때 1.평가(생성) 2.실행단계를 거쳐 실행된다.
//호이스팅도 항상 일어난다.
//호이스팅? --> 변수를 어느 위치에 선언했느냐 상관없이 평가(생성) 단계에서 선언된 변수,함수, 객체를 스코프 상의 최상단의 끌어올린다.
//호이스팅되는 변수의 값은 undefined로 초기화 된다.

//호이스팅은 let이나 var 그런거 상관없이 항상 일어나는 일이고, let은 호이스팅이 되긴하는데 상위 스코프로 접근하지 못하도록 막아버린다.

console.log(message);
var message = "안녕하세요";
console.log(message);


//함수도 마찬가지로 호이스팅이된다. var 처럼 작동한다. 1.정의전에도 호출이 가능하고 2.덮어써진다.

foo();

function foo() {
    console.log("호이스팅");
}

function foo() {
    console.log("호이스팅2");
}


//상수 처리
const PI = 3.14;
// 수정불가
// PI = 555;
// console.log(PI);